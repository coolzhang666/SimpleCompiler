code->program

expression->assignment_expression

assignment_expression->or_expression $ or_expression = or_expression

or_expression->or_expression_table

or_expression_table->and_expression $ and_expression || or_expression_table

and_expression->and_expression_table

and_expression_table->relational_expression $ relational_expression && and_expression_table

relational_expression->arithmetic_expression $ arithmetic_expression relational_operator arithmetic_expression

relational_operator->> $ < $ >= $ <= $ == $ !=

arithmetic_expression->item + arithmetic_expression $ item - arithmetic_expression $ item

item->factor * item $ factor / item $ factor % item $ factor

factor->! factor $ ( or_expression ) $ constant $ identifier $ function_call

constant->integer $ decimal $ character $ string

function_call->identifier ( real_param ) $ identifier ( )

real_param->expression $ expression , real_param

statement->declaration_block $ execute_statement $ complex_statement

declaration_statement->value_declaration $ function_declaration

value_declaration->constant_declaration $ variable_declaration

constant_declaration->constant_declaration_left constant_declaration_table

constant_declaration_left->const type

type->int $ float $ char $ void

constant_declaration_table->identifier = constant ; $ identifier = constant , constant_declaration_table

variable_declaration->type variable_declaration_table

variable_declaration_table->identifier ; $ identifier = expression ; $ identifier , variable_declaration_table $ identifier = expression , variable_declaration_table

function_declaration->type identifier ( function_declaration_form ) ; $ type identifier ( ) ;

function_declaration_form->type $ type , function_declaration_form

execute_statement->data_processing_statement $ control_statement $ complex_statement

data_processing_statement->assignment_statement $ function_call_statement

assignment_statement->assignment_expression ;

function_call_statement->function_call ;

control_statement->if_statement $ for_statement $ while_statement $ do_while_statement $ break_statement $ continue_statement $ return_statement $ read_statement $ write_statement

read_statement->read ( identifier ) ;

write_statement->write ( identifier ) ;

complex_statement->left_bracket statement_table right_bracket $ left_bracket right_bracket

left_bracket->{

right_bracket->}

statement_table->statement $ statement statement_table

if_statement->without_else complex_statement $ with_else complex_statement

without_else->kw_if ( expression )

kw_if->if

with_else->without_else complex_statement else

for_statement->for_statement_begin complex_statement

for_statement_begin->expression_2 expression )

expression_2->expression_1 expression ;

expression_1->kw_for ( expression ;

kw_for->for

while_statement->while ( expression ) complex_statement

do_while_statement->do_while_begin ( expression ) ;

do_while_begin->kw_do complex_statement while

kw_do->do

break_statement->break ;

continue_statement->continue ;

return_statement->return ; $ return expression ;

function_definition->type identifier ( ) complex_statement $ type identifier ( function_definition_form ) complex_statement

function_definition_form->type identifier $ type identifier , function_definition_form

program->main_function $ declaration_block main_function

declaration_block->declaration_statement $ declaration_statement declaration_block

main_function->main ( ) complex_statement $ main ( ) complex_statement function_block

function_block->function_definition $ function_definition function_block